//go:build ignore
// +build ignore

package main

import (
	"os"
	"text/template"
)

func main() {
	types := map[string]string{
		"Bool":          "bool",
		"BoolSlice":     "[]bool",
		"BytesBase64":   "[]byte",
		"BytesHex":      "[]byte",
		"Duration":      "time.Duration",
		"DurationSlice": "[]time.Duration",
		"Float32":       "float32",
		"Float32Slice":  "[]float32",
		"Float64":       "float64",
		"Float64Slice":  "[]float64",
		"Int":           "int",
		"IntSlice":      "[]int",
		"Int32":         "int32",
		"Int32Slice":    "[]int32",
		"Int64":         "int64",
		"Int64Slice":    "[]int64",
		"Uint":          "uint",
		"UintSlice":     "[]uint",
		"IP":            "net.IP",
		"IPSlice":       "[]net.IP",
		"IPNet":         "net.IPNet",
		"IPMask":        "net.IPMask",
		"String":        "string",
		"StringSlice":   "[]string",
	}

	ft, err := os.Create("flag_types.go")
	if err != nil {
		panic(err)
	}
	defer ft.Close()

	err = flagTemplate.Execute(ft, types)
	if err != nil {
		panic(err)
	}
}

var flagTemplate = template.Must(template.New("").Parse(`package cli

// Code generated by go generate; DO NOT EDIT.

import (
	"net"
	"time"

	"github.com/spf13/pflag"
)
{{ range $name, $type := . }}
var _ Flag = &{{ $name }}Flag{}

// {{ $name }}Flag is used to define a pflag.FlagSet.{{ $name }}P flag.
type {{ $name }}Flag struct {
	Name     string
	Usage    string
	EnvVar   []string
	Value    {{ $type }}
	Required bool
}

// Apply implements Flag.
func (f *{{ $name }}Flag) Apply(fs *pflag.FlagSet) {
	fs.{{ $name }}VarP(&f.Value, f.GetName(), f.GetShorthand(), f.Value, usageWithEnvVar(f.GetUsage(), f.GetEnvVar()))
}

// GetName implements Flag.
func (f *{{ $name }}Flag) GetName() string {
	s, _ := splitFlagName(f.Name)
	return s
}

// GetShorthand implements Flag.
func (f *{{ $name }}Flag) GetShorthand() string {
	_, s := splitFlagName(f.Name)
	return s
}

// GetUsage implements Flag.
func (f *{{ $name }}Flag) GetUsage() string {
	return f.Usage
}

// GetEnvVar implements Flag.
func (f *{{ $name }}Flag) GetEnvVar() []string {
	return f.EnvVar
}

// GetValue implements Flag.
func (f *{{ $name }}Flag) GetValue() interface{} {
	return f.Value
}

// IsRequired implements Flag.
func (f *{{ $name }}Flag) IsRequired() bool {
	return f.Required
}

// {{ $name }} returns the {{ $type }} value of the flag with the specified name. 
func (c *Context) {{ $name }}(name string) {{ $type }} {
	value := c.lookup(name).GetValue()

	v, ok := value.({{ $type }})
	if !ok {
		panic(typeMismatchErr(name, "{{ $type }}", value))
	}

	return v
}
{{ end -}}
`))
